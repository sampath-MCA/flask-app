#include "esp_camera.h"
#include "base64.h"  // Use a lightweight Base64 library
#include "FS.h"
#include "SD_MMC.h"
String server = "www.zofoxai.com"; // Your Python server IP
String path = "/upload";          // Flask route
#define FLASH_LED_PIN 4
String apn = "www";
#define gsm_RX 15
#define gsm_TX 14
 
HardwareSerial gsm(2);
 
 
void setup() {
  pinMode(FLASH_LED_PIN, OUTPUT);
  Serial.begin(115200);
  gsm.begin(9600, SERIAL_8N1, gsm_RX, gsm_TX);
  delay(3000);
 
  // Camera config
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_QVGA;
  config.jpeg_quality = 30;
  config.fb_count = 1;
 
  // Initialize camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.println("Camera init failed");
    return;
  }
 
 digitalWrite(FLASH_LED_PIN, HIGH);
 delay(200);
  // Capture image
  camera_fb_t *fb = esp_camera_fb_get();
  digitalWrite(FLASH_LED_PIN, LOW);
  if (!fb) {
    Serial.println("Capture failed");
    return;
  }
 
// Connect GPRS
  sendAT("AT");
  sendAT("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");
  sendAT("AT+SAPBR=3,1,\"APN\",\"" + apn + "\"");
  sendAT("AT+SAPBR=1,1");
 
  // sendAT("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");
  // sendAT("AT+SAPBR=3,1,\"APN\",\"" + apn + "\"");
  // sendAT("AT+SAPBR=1,1");
  sendAT("AT+SAPBR=2,1");
 
  // if (!SD_MMC.begin()) {
  //   Serial.println("SD Card Mount Failed");
  //   return;
  // }
 
// uint8_t cardType = SD_MMC.cardType();
//   if (cardType == CARD_NONE) {
//     Serial.println("No SD card attached");
//     return;
//   }
 
  // Capture photo
 
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }
 
  // Save photo to SD card
   File file = SD_MMC.open("/photo.jpg", FILE_WRITE);
  // if (!file) {
  //   Serial.println("Failed to open file");
  //   return;
  // }
 
  file.write(fb->buf, fb->len);
  file.close();
 
 
  //Serial.println("Photo saved to SD card as photo.jpg");
 
 
  // Encode to Base64
  String imageBase64 = base64::encode(fb->buf, fb->len);
  esp_camera_fb_return(fb);
 
  String chunkNo="first";
 // Serial.println(imageBase64);
 
   int id = rand();
   int chunkSize = 450;  // safe size for SIM900
    int totalLen = imageBase64.length();
    Serial.println("lllllllllll: " + String(totalLen));
   int index = 0;
 //  int totalLen = 5000;
  for (int i = 0; i < totalLen; i += chunkSize) {
   // int end = i + chunkSize;
   
      int chunksizes = i + chunkSize;
      Serial.println("totalLen: " + String(index));
      if(totalLen <= chunksizes){
        chunkNo = "last";
      }
     // Serial.println("i"+i);
     // Serial.println("next"+chunksizes);
     // Serial.println(imageBase64.substring(i, chunksizes));
    index +=1;  
  sendPostRequest(imageBase64.substring(i, chunksizes),id,chunkNo,index);
   
  delay(1000);
  }
 
}
 
void loop() {}
 
void sendAT(String cmd) {
  gsm.println(cmd);
  delay(500);
  while (gsm.available()) {
    Serial.write(gsm.read());
  }
}
 
 void sendPostRequest(String imageBase64, int id, String chunkNo, int index) {
 
  String serialNumber = "zofoxai-signal-0123";
  //int chunkNo = 0
  //int index = 0
  // Init HTTP
  String query = "?user=" + String(serialNumber)
               + "&id=" + int(id)
               + "&chunkNo=" + String(chunkNo)
               + "&index=" + int(index) + "";
 
 
  sendAT("AT+HTTPINIT");
  sendAT("AT+HTTPPARA=\"CID\",1");
  sendAT("AT+HTTPPARA=\"URL\",\"http://" + server + path + query +"\"");
  sendAT("AT+HTTPPARA=\"CONTENT\",\"application/json\"");
  String base = "image";
  // Body
  String payload = "{\"" + String(base) + "\":\"" + imageBase64 + "\"}";
 
  int totalLen = payload.length();
 
  // Tell module how much data is coming
  gsm.print("AT+HTTPDATA=");
  gsm.print(totalLen);
  gsm.println(",60000");
 
  // Wait until we see "DOWNLOAD"
  bool gotDownload = false;
  unsigned long start = millis();
  while (millis() - start < 5000) {
    if (gsm.available()) {
      String line = gsm.readStringUntil('\n');
      Serial.println(">> " + line);
      if (line.indexOf("DOWNLOAD") >= 0) {
        gotDownload = true;
        break;
      }
    }
  }
 
  if (!gotDownload) {
    Serial.println("!! ERROR: never saw DOWNLOAD");
    return;
  }
 
  // Now send JSON body
  gsm.print(payload);
  delay(300);  // let module process
 
  // Execute POST
  gsm.println("AT+HTTPACTION=1");
  waitHTTPResponse();
 
  // Read server response
  gsm.println("AT+HTTPREAD");
  delay(1000);
  debugRead();
 
  gsm.println("AT+HTTPTERM");
}
 
 
 
void debugRead() {
  while (gsm.available()) {
    String line = gsm.readStringUntil('\n');
    Serial.println(">> " + line);
  }
}
 
 
void waitHTTPResponse() {
  unsigned long start = millis();
  while (millis() - start < 15000) {
    if (gsm.available()) {
      String line = gsm.readStringUntil('\n');
      Serial.println(line);
      if (line.indexOf("+HTTPACTION") >= 0) {
        break;
      }
    }
  }
}
 
